package com.jwt.security;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Component
public class JwtTokenUtil implements Serializable {

	 private static final long serialVersionUID = 1L;
	 
	@Value("${jwt.signing.key}")
	private String signingKey;

    public String generateToken(String username, String deviceId, String ipAddress) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("deviceId", deviceId);  // Bind token to a specific device or session
        claims.put("ipAddress", ipAddress);
        
        return createToken(claims, username);
    }

    private String createToken(Map<String, Object> claims, String subject) {
        return Jwts.builder().setClaims(claims).setSubject(subject)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 2)) //60 * 10
                .signWith(SignatureAlgorithm.HS512, signingKey).compact();
    }

    public Boolean validateToken(String token, String username, String currentDeviceId, String currentIpAddress) {
    	 Claims claims = Jwts.parser().setSigningKey(signingKey).parseClaimsJws(token).getBody();
    	 
    	 String extractedUsername = claims.getSubject();
         String tokenDeviceId = claims.get("deviceId", String.class);
         String tokenIpAddress = claims.get("ipAddress", String.class);
         
         System.out.println("JwtTokenUtil.validateToken()");
        return (extractedUsername.equals(username) &&
                tokenDeviceId.equals(currentDeviceId) &&
                tokenIpAddress.equals(currentIpAddress) && 
                !isTokenExpired(token));
    }

    private Boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parser().setSigningKey(signingKey).parseClaimsJws(token).getBody();
    }
}
